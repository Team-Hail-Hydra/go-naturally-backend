// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id         String  @id @default(uuid())
  userId     String  @unique // Supabase auth.users.id
  fullName   String
  email      String  @unique
  role       Role
  profilePic String?
  ecoPoints  Int     @default(0)

  school   School? @relation(fields: [schoolId], references: [id])
  schoolId String?

  ngo                        NGO?                         @relation(fields: [ngoId], references: [id])
  ngoId                      String?
  NGO_Events_Applications    NGO_Events_Applications[]
  School_Events_Applications School_Events_Applications[]
  Plant                      Plant[]
  Litter                     Litter[]
  Animals                    Animals[]
}

enum Role {
  STUDENT
  TEACHER
  NGO
}

model School {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  phoneNo       String          @unique
  members       Profile[]
  School_Events School_Events[]
}

model NGO {
  id         String       @id @default(uuid())
  name       String
  email      String       @unique
  phoneNo    String       @unique
  members    Profile[]
  NGO_Events NGO_Events[]
}

model NGO_Events {
  id                      String                    @id @default(uuid())
  title                   String
  description             String
  latitude                Float
  longitude               Float
  date                    String
  ngo                     NGO                       @relation(fields: [ngoId], references: [id])
  ngoId                   String
  NGO_Events_Applications NGO_Events_Applications[]
}

model School_Events {
  id                         String                       @id @default(uuid())
  title                      String
  description                String
  latitude                   Float
  longitude                  Float
  date                       String
  school                     School                       @relation(fields: [schoolId], references: [id])
  schoolId                   String
  School_Events_Applications School_Events_Applications[]
}

model NGO_Events_Applications {
  id         String            @id @default(uuid())
  ngoEvent   NGO_Events        @relation(fields: [ngoEventId], references: [id])
  ngoEventId String
  profile    Profile           @relation(fields: [profileId], references: [id])
  profileId  String
  status     ApplicationStatus @default(PENDING)
  appliedAt  DateTime          @default(now())
}

model School_Events_Applications {
  id            String        @id @default(uuid())
  schoolEvent   School_Events @relation(fields: [schoolEventId], references: [id])
  schoolEventId String
  profile       Profile       @relation(fields: [profileId], references: [id])
  profileId     String
  appliedAt     DateTime      @default(now())
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Plant {
  id          String  @id @default(uuid())
  plantName   String
  imageUrl    String
  latitude    Float
  longitude   Float
  createdBy   Profile @relation(fields: [createdById], references: [userId])
  createdById String
}

model Litter {
  id          String  @id @default(uuid())
  beforeImg   String
  afterImg    String
  latitude    Float
  longitude   Float
  createdBy   Profile @relation(fields: [createdById], references: [userId])
  createdById String
  isAwarded   Boolean @default(false)
}

model Animals {
  id                String  @id @default(uuid())
  name              String
  description       String
  average_life_span String
  rarity            Int
  latitude          Float
  longitude         Float
  imageUrl          String
  createdById       String
  createdBy         Profile @relation(fields: [createdById], references: [userId])
}
